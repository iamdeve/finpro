[{"/home/yamin/Downloads/work/finpro/src/reportWebVitals.js":"1","/home/yamin/Downloads/work/finpro/src/components/MenuBar.js":"2","/home/yamin/Downloads/work/finpro/src/views/Reports/Reports.js":"3","/home/yamin/Downloads/work/finpro/src/views/RandD/RandD.js":"4","/home/yamin/Downloads/work/finpro/src/RoundedBars.js":"5","/home/yamin/Downloads/work/finpro/src/views/Marketing/Marketing.js":"6","/home/yamin/Downloads/work/finpro/src/views/Sales/Sales.js":"7","/home/yamin/Downloads/work/finpro/src/views/GandA/GandA.js":"8","/home/yamin/Downloads/work/finpro/src/App.js":"9","/home/yamin/Downloads/work/finpro/src/views/Auth/SignUp/SignUp.js":"10","/home/yamin/Downloads/work/finpro/src/context/context.js":"11","/home/yamin/Downloads/work/finpro/src/views/Revenue/Revenue.js":"12","/home/yamin/Downloads/work/finpro/src/views/Auth/Login/Login.js":"13","/home/yamin/Downloads/work/finpro/src/routes.js":"14","/home/yamin/Downloads/work/finpro/src/views/Checkout/Checkout.js":"15","/home/yamin/Downloads/work/finpro/src/context/axios.js":"16","/home/yamin/Downloads/work/finpro/src/index.js":"17","/home/yamin/Downloads/work/finpro/src/views/Settings/Settings.js":"18","/home/yamin/Downloads/work/finpro/src/views/Pricing/Pricing.js":"19","/home/yamin/Downloads/work/finpro/src/views/Billing/Billing.js":"20","/home/yamin/Downloads/work/finpro/src/service.js":"21","/home/yamin/Downloads/work/finpro/src/context/types.js":"22","/home/yamin/Downloads/work/finpro/src/context/fetch-service.js":"23","/home/yamin/Downloads/work/finpro/src/context/revenue-service.js":"24","/home/yamin/Downloads/work/finpro/src/views/Revenue/RevenueInputs.js":"25","/home/yamin/Downloads/work/finpro/src/views/Revenue/ExpenseInputs.js":"26","/home/yamin/Downloads/work/finpro/src/views/Revenue/StartingCapitalInput.js":"27","/home/yamin/Downloads/work/finpro/src/views/Sales/ExpenseInputs.js":"28","/home/yamin/Downloads/work/finpro/src/views/Sales/SalesInputs.js":"29","/home/yamin/Downloads/work/finpro/src/context/input-service.js":"30","/home/yamin/Downloads/work/finpro/src/views/Sales/ContractorExpense.js":"31","/home/yamin/Downloads/work/finpro/src/views/Marketing/ExpenseInputs.js":"32","/home/yamin/Downloads/work/finpro/src/views/Marketing/MarketingInputs.js":"33","/home/yamin/Downloads/work/finpro/src/views/Marketing/ContractorExpense.js":"34","/home/yamin/Downloads/work/finpro/src/views/RandD/ExpenseInputs.js":"35","/home/yamin/Downloads/work/finpro/src/views/RandD/RandDInputs.js":"36","/home/yamin/Downloads/work/finpro/src/views/RandD/ContractorExpense.js":"37","/home/yamin/Downloads/work/finpro/src/views/GandA/ExpenseInputs.js":"38","/home/yamin/Downloads/work/finpro/src/views/GandA/GandAInputs.js":"39","/home/yamin/Downloads/work/finpro/src/views/GandA/ContractorExpense.js":"40","/home/yamin/Downloads/work/finpro/src/utils/utils.js":"41","/home/yamin/Downloads/work/finpro/src/utils/chart-utils.js":"42","/home/yamin/Downloads/work/finpro/src/context/payment-service.js":"43","/home/yamin/Downloads/work/finpro/src/context/subscription-service.js":"44","/home/yamin/Downloads/work/finpro/src/context/colors.js":"45","/home/yamin/Downloads/work/finpro/src/views/Auth/Confirm/Confirm.js":"46"},{"size":362,"mtime":1609173384982,"results":"47","hashOfConfig":"48"},{"size":4917,"mtime":1610114126422,"results":"49","hashOfConfig":"48"},{"size":12792,"mtime":1610211315770,"results":"50","hashOfConfig":"48"},{"size":13207,"mtime":1610209288570,"results":"51","hashOfConfig":"48"},{"size":5304,"mtime":1609173384978,"results":"52","hashOfConfig":"48"},{"size":14084,"mtime":1610209261566,"results":"53","hashOfConfig":"48"},{"size":13238,"mtime":1610209332922,"results":"54","hashOfConfig":"48"},{"size":13299,"mtime":1610209253126,"results":"55","hashOfConfig":"48"},{"size":661,"mtime":1609173384978,"results":"56","hashOfConfig":"48"},{"size":4714,"mtime":1611736798340,"results":"57","hashOfConfig":"48"},{"size":17160,"mtime":1610607211234,"results":"58","hashOfConfig":"48"},{"size":10219,"mtime":1610209311266,"results":"59","hashOfConfig":"48"},{"size":4917,"mtime":1611733953688,"results":"60","hashOfConfig":"48"},{"size":1924,"mtime":1611737225976,"results":"61","hashOfConfig":"48"},{"size":2187,"mtime":1608795239980,"results":"62","hashOfConfig":"48"},{"size":624,"mtime":1611734177004,"results":"63","hashOfConfig":"48"},{"size":579,"mtime":1609173384982,"results":"64","hashOfConfig":"48"},{"size":7156,"mtime":1611674030709,"results":"65","hashOfConfig":"48"},{"size":8178,"mtime":1610209279146,"results":"66","hashOfConfig":"48"},{"size":14695,"mtime":1610184746345,"results":"67","hashOfConfig":"48"},{"size":601,"mtime":1609173384982,"results":"68","hashOfConfig":"48"},{"size":568,"mtime":1610101932841,"results":"69","hashOfConfig":"48"},{"size":1392,"mtime":1611673719029,"results":"70","hashOfConfig":"48"},{"size":2304,"mtime":1611673718917,"results":"71","hashOfConfig":"48"},{"size":8842,"mtime":1610604845237,"results":"72","hashOfConfig":"48"},{"size":9926,"mtime":1609335996209,"results":"73","hashOfConfig":"48"},{"size":6752,"mtime":1609221250384,"results":"74","hashOfConfig":"48"},{"size":13466,"mtime":1609221772057,"results":"75","hashOfConfig":"48"},{"size":9209,"mtime":1610021805713,"results":"76","hashOfConfig":"48"},{"size":1586,"mtime":1609173384982,"results":"77","hashOfConfig":"48"},{"size":6865,"mtime":1610029790515,"results":"78","hashOfConfig":"48"},{"size":16506,"mtime":1609221849501,"results":"79","hashOfConfig":"48"},{"size":9380,"mtime":1610024397920,"results":"80","hashOfConfig":"48"},{"size":6931,"mtime":1609220550353,"results":"81","hashOfConfig":"48"},{"size":13463,"mtime":1609221237104,"results":"82","hashOfConfig":"48"},{"size":9218,"mtime":1610024369572,"results":"83","hashOfConfig":"48"},{"size":6864,"mtime":1609173384986,"results":"84","hashOfConfig":"48"},{"size":16517,"mtime":1609221172386,"results":"85","hashOfConfig":"48"},{"size":9184,"mtime":1610024472400,"results":"86","hashOfConfig":"48"},{"size":6864,"mtime":1609173384986,"results":"87","hashOfConfig":"48"},{"size":27263,"mtime":1610607676646,"results":"88","hashOfConfig":"48"},{"size":7046,"mtime":1609260349322,"results":"89","hashOfConfig":"48"},{"size":527,"mtime":1609343004401,"results":"90","hashOfConfig":"48"},{"size":784,"mtime":1610196595721,"results":"91","hashOfConfig":"48"},{"size":3377,"mtime":1610604202789,"results":"92","hashOfConfig":"48"},{"size":3719,"mtime":1611737629356,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1c1kmpq",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"99"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"99"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"105"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"99"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"99"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"99"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"105"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"105"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"109"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"158"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"99"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"158"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"99"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"109"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/yamin/Downloads/work/finpro/src/reportWebVitals.js",[],["212","213"],"/home/yamin/Downloads/work/finpro/src/components/MenuBar.js",[],["214","215"],"/home/yamin/Downloads/work/finpro/src/views/Reports/Reports.js",["216"],"import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { ButtonGroup, Button } from 'react-bootstrap';\nimport { AuthContext } from '../../context/context';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport numeral from 'numeral';\nimport { getInputs } from '../../context/fetch-service';\nimport { getRevenue } from '../../context/fetch-service';\n\nimport autoTable from 'jspdf-autotable';\nimport { CSVLink } from 'react-csv';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t},\n}));\n\nfunction Reports() {\n\tconst history = useHistory();\n\n\tconst classes = useStyles();\n\tconst {\n\t\tstate: { purchasing, reports, tableData, isAuthenticated },\n\t\tdispatch,\n\t} = React.useContext(AuthContext);\n\n\tconsole.log(tableData);\n\tconst userSub = purchasing && purchasing.length > 0 ? purchasing.filter((sub) => sub.status === 'active') : [];\n\n\tconst [csvData, setCsvData] = React.useState('');\n\tconst [chartValue, setChartValue] = React.useState('P&L by Year');\n\tconst [chartLoader, setChartLoader] = React.useState(true);\n\tconst [alertClass, setAlertClass] = React.useState(userSub && userSub.length > 0 ? '' : 'show');\n\tconst handleCloseAlert = () => {\n\t\tsetAlertClass('hide');\n\t};\n\tconst handleChange = (text) => {\n\t\tsetChartLoader(true);\n\t\tsetChartValue(text);\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (!isAuthenticated) {\n\t\t\thistory.push('/login');\n\t\t}\n\t\tif (chartValue !== 'CapEx & Cash Flow') {\n\t\t\tasync function fetchRevenue() {\n\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\tpayload: revenues,\n\t\t\t\t});\n\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// console.log(revenues);\n\t\t\t\t\tif (revenues && revenues.revenuInputs && revenues.revenuInputs.length > 0) {\n\t\t\t\t\t\tdispatch({ type: 'VIEW_REPORTS', payload: chartValue });\n\t\t\t\t\t}\n\t\t\t\t\tsetChartLoader(false);\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t\tfetchRevenue();\n\t\t} else {\n\t\t\tdispatch({ type: 'SET_TABLE_DATA' });\n\t\t\tsetChartLoader(false);\n\t\t}\n\t}, [isAuthenticated, history, dispatch, chartValue]);\n\n\tconst generatePdf = () => {\n\t\tif (reports && reports.datasets.length > 0 && tableData) {\n\t\t\tif (reports) {\n\t\t\t\tif (chartValue === 'CapEx & Cash Flow') {\n\t\t\t\t\tconst doc = new jsPDF();\n\t\t\t\t\tautoTable(doc, { html: '#report-table', startY: 20, startX: 5, margin: { left: 0, right: 0 } });\n\t\t\t\t\tconst date = Date().split(' ');\n\t\t\t\t\t// we use a date string to generate our filename.\n\t\t\t\t\tconst dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n\t\t\t\t\t// ticket title. and margin-top + margin-left\n\t\t\t\t\tdoc.text('Next Five Year Quarter Data', 14, 15);\n\t\t\t\t\t// we define the name of our PDF file.\n\t\t\t\t\tdoc.save(`report_${dateStr}.pdf`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst doc = new jsPDF();\n\n\t\t\t\tlet revenues = reports.datasets[0].data;\n\t\t\t\tlet expenses = reports.datasets[1].data;\n\t\t\t\tlet operProf = reports.datasets[2].data;\n\t\t\t\tlet ebit = reports.datasets[3].data;\n\t\t\t\t// define the columns we want and their titles\n\t\t\t\tconst tableColumn = ['Year', 'Revenues', 'Expenses', 'Operation Profit', 'EBIT'];\n\t\t\t\t// define an empty array of rows\n\t\t\t\tconst tableRows = [];\n\t\t\t\t// for each ticket pass all its data into an array\n\t\t\t\treports.labels.forEach((label, id) => {\n\t\t\t\t\tconst reportData = [label, revenues[id].toFixed(2), expenses[id].toFixed(2), operProf[id].toFixed(2), ebit[id].toFixed(2)];\n\t\t\t\t\ttableRows.push(reportData);\n\t\t\t\t});\n\n\t\t\t\t// startY is basically margin-top\n\t\t\t\tdoc.autoTable(tableColumn, tableRows, { startY: 20 });\n\t\t\t\tconst date = Date().split(' ');\n\t\t\t\t// we use a date string to generate our filename.\n\t\t\t\tconst dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n\t\t\t\t// ticket title. and margin-top + margin-left\n\t\t\t\tdoc.text('Next Five Year Data', 14, 15);\n\t\t\t\t// we define the name of our PDF file.\n\t\t\t\tdoc.save(`report_${dateStr}.pdf`);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst generateCSV = () => {\n\t\tconsole.log(reports);\n\t\tif (reports && reports.datasets.length > 0) {\n\t\t\tlet revenues = reports.datasets[0].data;\n\t\t\tlet expenses = reports.datasets[1].data;\n\t\t\tlet operProf = reports.datasets[2].data;\n\t\t\tlet ebit = reports.datasets[3].data;\n\t\t\tlet str = '';\n\t\t\tif (chartValue === 'P&L by Year') {\n\t\t\t\tstr += 'Year ,' + reports.labels.toString() + ',\\n';\n\t\t\t\tstr += 'Revenues ,' + revenues.toString() + ',\\n';\n\t\t\t\tstr += 'Expenses ,' + expenses.toString() + ',\\n';\n\t\t\t\tstr += 'Operation Profit ,' + operProf.toString() + ',\\n';\n\t\t\t\tstr += 'EBIT ,' + ebit.toString() + ',\\n';\n\t\t\t} else if (chartValue === 'P&L by Quarter') {\n\t\t\t\tstr += 'Quarter ,' + reports.labels.toString() + ',\\n';\n\t\t\t\tstr += 'Revenues ,' + revenues.toString() + ',\\n';\n\t\t\t\tstr += 'Expenses ,' + expenses.toString() + ',\\n';\n\t\t\t\tstr += 'Operation Profit ,' + operProf.toString() + ',\\n';\n\t\t\t\tstr += 'EBIT ,' + ebit.toString() + ',\\n';\n\t\t\t} else if (chartValue === 'CapEx & Cash Flow') {\n\t\t\t\t// console.log(tableData);\n\t\t\t\tif (tableData) {\n\t\t\t\t\tstr += 'Quarter ,' + tableData.labels.toString() + ',\\n';\n\t\t\t\t\tstr += 'Beginning Cash ,' + tableData.beginingCash.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Gross Margin ,' + tableData.quarterRevenues.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Expenses ,' + tableData.quarterExpense.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Investment ,' + tableData.investment.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Capital Expense ,' + tableData.captalExpense.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Change in Cash ,' + tableData.changeInCash.slice(0, 15).toString() + ',\\n';\n\t\t\t\t\tstr += 'Endign Cash ,' + tableData.endingCash.slice(0, 15).toString() + ',\\n';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(str);\n\t\t\tsetCsvData(str);\n\t\t}\n\t};\n\treturn userSub && userSub.length > 0 ? (\n\t\t<div className='report-container'>\n\t\t\t<div className='container-fluid'>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-3 col-xl-3 full-height'>\n\t\t\t\t\t\t<div className='control-panel'>\n\t\t\t\t\t\t\t<div className='control-btn'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\thandleChange('P&L by Year');\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName={['btn', chartValue === 'P&L by Year' ? 'btn-primary' : 'btn-light'].join(' ')}>\n\t\t\t\t\t\t\t\t\tP&L by Year\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='control-btn'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\thandleChange('P&L by Quarter');\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName={['btn', chartValue === 'P&L by Quarter' ? 'btn-primary' : 'btn-light'].join(' ')}>\n\t\t\t\t\t\t\t\t\tP&L by Quarter\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='control-btn'>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\thandleChange('CapEx & Cash Flow');\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName={['btn', chartValue === 'CapEx & Cash Flow' ? 'btn-primary' : 'btn-light'].join(' ')}>\n\t\t\t\t\t\t\t\t\tCapEx & Cash Flow\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col-9 col-xl-9'>\n\t\t\t\t\t\t<div className='chart-panel'>\n\t\t\t\t\t\t\t<div className='card'>\n\t\t\t\t\t\t\t\t<div className='card-header'>\n\t\t\t\t\t\t\t\t\t<h4 className='card-header-title'>{chartValue}</h4>\n\t\t\t\t\t\t\t\t\t<div className='chart-handle-grup'>\n\t\t\t\t\t\t\t\t\t\t<ButtonGroup aria-label='Basic example'>\n\t\t\t\t\t\t\t\t\t\t\t<span className='btn-custom-group'>Export</span>\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={generateCSV} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\t\t\t\t{reports ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CSVLink className='csv-download-btn' onClick={generateCSV} filename={'data.csv'} data={csvData}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCSV\n\t\t\t\t\t\t\t\t\t\t\t\t\t</CSVLink>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t'CSV'\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button onClick={generatePdf} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\t\t\t\tPDF\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t\t\t\t{chartLoader ? (\n\t\t\t\t\t\t\t\t\t\t<div className='loader-wrapper'>\n\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : chartValue === 'CapEx & Cash Flow' ? (\n\t\t\t\t\t\t\t\t\t\t<div className='custom-table-container'>\n\t\t\t\t\t\t\t\t\t\t\t<table id='report-table' responsive>\n\t\t\t\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<td></td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.labels && tableData.labels.map((quarter, id) => <th key={id}>{quarter}</th>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Beginning Cash</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.beginingCash && tableData.beginingCash.slice(0, tableData.beginingCash.length - 1).map((exp, id) => <td key={id}>${exp.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Gross Margin</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.quarterRevenues && tableData.quarterRevenues.slice(0, tableData.quarterRevenues.length - 1).map((rev, id) => <td key={id}>${rev.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Expenses</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.quarterExpense && tableData.quarterExpense.map((qpro, id) => <td key={id}>${qpro.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Investment</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.investment && tableData.investment.map((inv, id) => <td key={id}>${inv}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Capital Expense</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.captalExpense && tableData.captalExpense.map((ce, id) => <td key={id}>${ce.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Change in Cash</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.changeInCash && tableData.changeInCash.slice(0, tableData.changeInCash.length - 1).map((cic, id) => <td key={id}>${cic.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<th>Ending Balance</th>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{tableData && tableData.endingCash && tableData.endingCash.slice(0, tableData.endingCash.length - 1).map((ec, id) => <td key={id}>${ec.toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Bar\n\t\t\t\t\t\t\t\t\t\t\theight={400}\n\t\t\t\t\t\t\t\t\t\t\tdata={reports}\n\t\t\t\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\t\t\t\ttooltips: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: function (tooltipItem, data) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn data['labels'][tooltipItem[0]['index']];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel: function (tooltipItem, data) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet value;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdata['datasets'].forEach((d) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (d['data'][tooltipItem['index']] === Number(tooltipItem.value)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue = '$ ' + d['data'][tooltipItem['index']];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// console.log(value)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tafterLabel: function (tooltipItem, data) {},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: '#FFF',\n\t\t\t\t\t\t\t\t\t\t\t\t\tborderWidth: 2,\n\t\t\t\t\t\t\t\t\t\t\t\t\txPadding: 15,\n\t\t\t\t\t\t\t\t\t\t\t\t\tyPadding: 15,\n\t\t\t\t\t\t\t\t\t\t\t\t\tborderColor: '#ddd',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitleFontSize: 16,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitleFontColor: '#0066ff',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbodyFontColor: '#000',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbodyFontSize: 14,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisplayColors: false,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tcornerRadius: 20,\n\t\t\t\t\t\t\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\t\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\t\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tyAxes: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcallback: function (value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn '$ ' + numeral(value).format('0.0a');\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstepSize: 200,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tborderDash: [2],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// zeroLineColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzeroLineWidth: 3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttickMarkLength: 15,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlineWidth: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\txAxes: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// barThickness: 10,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbarPercentage: 0.3,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgridLines: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlineWidth: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tzeroLineColor: 'transparent',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tlegend={{\n\t\t\t\t\t\t\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\t\t\t\t\t\t\tposition: 'bottom',\n\t\t\t\t\t\t\t\t\t\t\t\tlabels: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tusePointStyle: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\tboxWidth: 10,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t) : (\n\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t<strong>Please subscribe our product to use the app</strong>\n\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Reports;\n","/home/yamin/Downloads/work/finpro/src/views/RandD/RandD.js",[],["217","218"],"/home/yamin/Downloads/work/finpro/src/RoundedBars.js",["219","220","221"],"//Custom rewrite for radius border on bar draw\n//Code from https://github.com/jedtrow/Chart.js-Rounded-Bar-Charts with a few adjustments\n\nimport { Chart as ChartJS } from 'react-chartjs-2';\nChartJS.elements.Rectangle.prototype.draw = function () {\n\tlet ctx = this._chart.ctx;\n\tlet vm = this._view;\n\tlet left, right, top, bottom, signX, signY, borderSkipped, radius;\n\tlet borderWidth = vm.borderWidth;\n\n\t// If radius is less than 0 or is large enough to cause drawing errors a max\n\t//      radius is imposed. If cornerRadius is not defined set it to 0.\n\tlet cornerRadius = this._chart.config.options.cornerRadius;\n\tif (cornerRadius < 0) {\n\t\tcornerRadius = 0;\n\t}\n\tif (typeof cornerRadius == 'undefined') {\n\t\tcornerRadius = 0;\n\t}\n\n\tif (!vm.horizontal) {\n\t\t// bar\n\t\tleft = vm.x - vm.width / 2;\n\t\tright = vm.x + vm.width / 2;\n\t\ttop = vm.y;\n\t\tbottom = vm.base;\n\t\tsignX = 1;\n\t\tsignY = bottom > top ? 1 : -1;\n\t\tborderSkipped = vm.borderSkipped || 'bottom';\n\t} else {\n\t\t// horizontal bar\n\t\tleft = vm.base;\n\t\tright = vm.x;\n\t\ttop = vm.y - vm.height / 2;\n\t\tbottom = vm.y + vm.height / 2;\n\t\tsignX = right > left ? 1 : -1;\n\t\tsignY = 1;\n\t\tborderSkipped = vm.borderSkipped || 'left';\n\t}\n\n\t// Canvas doesn't allow us to stroke inside the width so we can\n\t// adjust the sizes to fit if we're setting a stroke on the line\n\tif (borderWidth) {\n\t\t// borderWidth shold be less than bar width and bar height.\n\t\tlet barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n\t\tborderWidth = borderWidth > barSize ? barSize : borderWidth;\n\t\tlet halfStroke = borderWidth / 2;\n\t\t// Adjust borderWidth when bar top position is near vm.base(zero).\n\t\tlet borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);\n\t\tlet borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);\n\t\tlet borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);\n\t\tlet borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);\n\t\t// not become a vertical line?\n\t\tif (borderLeft !== borderRight) {\n\t\t\ttop = borderTop;\n\t\t\tbottom = borderBottom;\n\t\t}\n\t\t// not become a horizontal line?\n\t\tif (borderTop !== borderBottom) {\n\t\t\tleft = borderLeft;\n\t\t\tright = borderRight;\n\t\t}\n\t}\n\n\tctx.beginPath();\n\tctx.fillStyle = vm.backgroundColor;\n\tctx.strokeStyle = vm.borderColor;\n\tctx.lineWidth = borderWidth;\n\n\t// Corner points, from bottom-left to bottom-right clockwise\n\t// | 1 2 |\n\t// | 0 3 |\n\tvar corners = [\n\t\t[left, bottom],\n\t\t[left, top],\n\t\t[right, top],\n\t\t[right, bottom],\n\t];\n\n\t// Find first (starting) corner with fallback to 'bottom'\n\tlet borders = ['bottom', 'left', 'top', 'right'];\n\tlet startCorner = borders.indexOf(borderSkipped, 0);\n\tif (startCorner === -1) {\n\t\tstartCorner = 0;\n\t}\n\n\tfunction cornerAt(index) {\n\t\treturn corners[(startCorner + index) % 4];\n\t}\n\n\t// Draw rectangle from 'startCorner'\n\tlet corner = cornerAt(0);\n\tctx.moveTo(corner[0], corner[1]);\n\n\tfor (let i = 1; i < 4; i++) {\n\t\tcorner = cornerAt(i);\n\t\tlet nextCornerId = i + 1;\n\t\tif (nextCornerId == 4) {\n\t\t\tnextCornerId = 0;\n\t\t}\n\n\t\tlet nextCorner = cornerAt(nextCornerId);\n\n\t\tlet width = corners[2][0] - corners[1][0];\n\t\tlet height = corners[0][1] - corners[1][1];\n\t\tlet x = corners[1][0];\n\t\tlet y = corners[1][1];\n\n\t\tlet radius = cornerRadius;\n\t\t// Fix radius being too large\n\t\tif (radius > Math.abs(height) / 2) {\n\t\t\tradius = Math.floor(Math.abs(height) / 2);\n\t\t}\n\t\tif (radius > Math.abs(width) / 2) {\n\t\t\tradius = Math.floor(Math.abs(width) / 2);\n\t\t}\n\n\t\tif (height < 0) {\n\t\t\t// Negative values in a standard bar chart\n\t\t\tlet x_tl = x;\n\t\t\tlet x_tr = x + width;\n\t\t\tlet y_tl = y + height;\n\t\t\tlet y_tr = y + height;\n\n\t\t\tlet x_bl = x;\n\t\t\tlet x_br = x + width;\n\t\t\tlet y_bl = y;\n\t\t\tlet y_br = y;\n\n\t\t\t// Draw\n\t\t\tctx.moveTo(x_bl + radius, y_bl);\n\t\t\tctx.lineTo(x_br - radius, y_br);\n\t\t\tctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n\t\t\tctx.lineTo(x_tr, y_tr + radius);\n\t\t\tctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n\t\t\tctx.lineTo(x_tl + radius, y_tl);\n\t\t\tctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n\t\t\tctx.lineTo(x_bl, y_bl - radius);\n\t\t\tctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n\t\t} else if (width < 0) {\n\t\t\t// Negative values in a horizontal bar chart\n\t\t\tlet x_tl = x + width;\n\t\t\tlet x_tr = x;\n\t\t\tlet y_tl = y;\n\t\t\tlet y_tr = y;\n\n\t\t\tlet x_bl = x + width;\n\t\t\tlet x_br = x;\n\t\t\tlet y_bl = y + height;\n\t\t\tlet y_br = y + height;\n\n\t\t\t// Draw\n\t\t\tctx.moveTo(x_bl + radius, y_bl);\n\t\t\tctx.lineTo(x_br - radius, y_br);\n\t\t\tctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\n\t\t\tctx.lineTo(x_tr, y_tr + radius);\n\t\t\tctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\n\t\t\tctx.lineTo(x_tl + radius, y_tl);\n\t\t\tctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\n\t\t\tctx.lineTo(x_bl, y_bl - radius);\n\t\t\tctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\n\t\t} else {\n\t\t\t//Positive Value\n\t\t\tctx.moveTo(x + radius, y);\n\t\t\tctx.lineTo(x + width - radius, y);\n\t\t\tctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n\t\t\tctx.lineTo(x + width, y + height - radius);\n\t\t\tctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n\t\t\tctx.lineTo(x + radius, y + height);\n\t\t\tctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n\t\t\tctx.lineTo(x, y + radius);\n\t\t\tctx.quadraticCurveTo(x, y, x + radius, y);\n\t\t}\n\t}\n\n\tctx.fill();\n\tif (borderWidth) {\n\t\tctx.stroke();\n\t}\n};\n",["222","223"],"/home/yamin/Downloads/work/finpro/src/views/Marketing/Marketing.js",["224"],"import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { FormControl, InputBase, NativeSelect } from '@material-ui/core';\nimport { AuthContext } from '../../context/context';\nimport { useHistory } from 'react-router-dom';\n\nimport { ButtonGroup, Button } from 'react-bootstrap';\nimport { getInputs } from '../../context/fetch-service';\n\nimport { getYear, getQuarter, getMonthDetails } from '../../utils/utils';\n\nimport autoTable from 'jspdf-autotable';\nimport { CSVLink } from 'react-csv';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nimport MarketingInputs from './MarketingInputs';\nimport ExpenseInputs from './ExpenseInputs';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t},\n}));\n\nconst BootstrapInput = withStyles((theme) => ({\n\troot: {\n\t\t'label + &': {\n\t\t\tmarginTop: theme.spacing(3),\n\t\t},\n\t},\n\tinput: {\n\t\tborderRadius: 4,\n\t\tposition: 'relative',\n\t\tbackgroundColor: '#f8f9fa',\n\t\t// border: '1px solid #ced4da',\n\t\tfontSize: 16,\n\t\tpadding: '10px 26px 10px 12px',\n\t\ttransition: theme.transitions.create(['border-color', 'box-shadow']),\n\t\t// Use the system font instead of the default Roboto font.\n\t\tfontFamily: ['-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', 'Arial', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(','),\n\t\t'&:focus': {\n\t\t\tborderRadius: 4,\n\t\t\tborderColor: '#80bdff',\n\t\t\tboxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n\t\t},\n\t},\n}))(InputBase);\n\nfunction Marketing() {\n\tconst history = useHistory();\n\tconst classes = useStyles();\n\tconst {\n\t\tstate: { purchasing, inputs, data, isAuthenticated },\n\t\tdispatch,\n\t} = React.useContext(AuthContext);\n\n\tconst marketing = inputs.filter((i) => i.title === 'marketing')[0];\n\n\tconst userSub = purchasing && purchasing.length > 0 ? purchasing.filter((sub) => sub.status === 'active') : [];\n\n\tconst [chartValue, setChartValue] = React.useState('year');\n\tconst handleChange = (event) => {\n\t\tsetChartValue(event.target.value);\n\t};\n\n\tconst [msg, setMsg] = React.useState('');\n\tconst [err, setErr] = React.useState('');\n\tconst [alertClass, setAlertClass] = React.useState(userSub && userSub.length > 0 ? '' : 'show');\n\n\tconst [csvData, setCsvData] = React.useState('');\n\n\tconst handleCloseAlert = () => {\n\t\tsetAlertClass('hide');\n\t\tsetErr('');\n\t\tsetMsg('');\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (!isAuthenticated) {\n\t\t\thistory.push('/login');\n\t\t}\n\t\tasync function fetchRevenue() {\n\t\t\tlet inputs = await getInputs();\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\tpayload: inputs,\n\t\t\t});\n\t\t}\n\t\tfetchRevenue();\n\t}, [isAuthenticated, history, dispatch]);\n\n\tconst generatePdf = () => {\n\t\tconst doc = new jsPDF();\n\t\tautoTable(doc, { html: '#marketing-table', startY: 20 });\n\t\tconst date = Date().split(' ');\n\t\t// we use a date string to generate our filename.\n\t\tconst dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n\t\t// ticket title. and margin-top + margin-left\n\t\tdoc.text('Next Five Year Data', 14, 15);\n\t\t// we define the name of our PDF file.\n\t\tdoc.save(`report_${dateStr}.pdf`);\n\t};\n\n\tconst generateCSV = () => {\n\t\tif (marketing && marketing.inputs && marketing.inputs.length > 0) {\n\t\t\tlet str = '';\n\t\t\tif (chartValue === 'year') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Year ,' +\n\t\t\t\t\tgetYear(marketing.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => new Date(year.startDate).getFullYear())\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetYear(marketing.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getYear(marketing.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getYear(marketing.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getYear(marketing.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getYear(marketing.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t} else if (chartValue === 'quarter') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Quarter ,' +\n\t\t\t\t\tgetQuarter(marketing.inputs)\n\t\t\t\t\t\t.headings.map((quarter, id) => quarter.quarter)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetQuarter(marketing.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getQuarter(marketing.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getQuarter(marketing.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getQuarter(marketing.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getQuarter(marketing.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t} else if (chartValue === 'month') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Monthly ,' +\n\t\t\t\t\tgetMonthDetails(marketing.inputs)\n\t\t\t\t\t\t.headings.map((month, id) => month.month)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetMonthDetails(marketing.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getMonthDetails(marketing.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getMonthDetails(marketing.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getMonthDetails(marketing.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getMonthDetails(marketing.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t}\n\n\t\t\tconsole.log(str);\n\t\t\tsetCsvData(str);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t};\n\n\treturn userSub && userSub.length > 0 ? (\n\t\t<div className='container-fluid'>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-12 col-xl-12'>\n\t\t\t\t\t{msg && (\n\t\t\t\t\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t<strong>{msg}</strong>\n\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{err && (\n\t\t\t\t\t\t<div className={`alert alert-danger alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t<strong>{err}</strong>\n\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className='table-container-header'>\n\t\t\t\t\t\t<h4 className=''>Marketing</h4>\n\t\t\t\t\t\t<div className='chart-handle-grup'>\n\t\t\t\t\t\t\t<div className='chart-dropdown'>\n\t\t\t\t\t\t\t\t<span className='mr-3'>View By :</span>\n\t\t\t\t\t\t\t\t<FormControl variant='outlined' className={classes.margin}>\n\t\t\t\t\t\t\t\t\t<NativeSelect id='demo-customized-select-native' value={chartValue} onChange={handleChange} input={<BootstrapInput />}>\n\t\t\t\t\t\t\t\t\t\t<option defaultValue='year' value='year'>\n\t\t\t\t\t\t\t\t\t\t\tYear\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t<option value='quarter'>Quarter</option>\n\t\t\t\t\t\t\t\t\t\t<option value='month'>Month</option>\n\t\t\t\t\t\t\t\t\t</NativeSelect>\n\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ButtonGroup aria-label='Basic example'>\n\t\t\t\t\t\t\t\t<span className='btn-custom-group'>Export</span>\n\t\t\t\t\t\t\t\t<Button onClick={generateCSV} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\t{marketing && marketing.inputs ? (\n\t\t\t\t\t\t\t\t\t\t<CSVLink className='csv-download-btn' onClick={generateCSV} filename={'data.csv'} data={csvData}>\n\t\t\t\t\t\t\t\t\t\t\tCSV\n\t\t\t\t\t\t\t\t\t\t</CSVLink>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t'CSV'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button onClick={generatePdf} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\tPDF\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='custom-table-container'>\n\t\t\t\t\t\t<table id='marketing-table'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && getYear(marketing.inputs).headings.map((year, id) => <th key={id}>{new Date(year.startDate).getFullYear()}</th>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && marketing && marketing.inputs && getQuarter(marketing.inputs).headings.map((quarter, id) => <th key={id}>{quarter.quarter}</th>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && marketing && marketing.inputs && getMonthDetails(marketing.inputs).headings.map((month, id) => <th key={id}>{month.month}</th>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Headcounts</th>\n\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && getYear(marketing.inputs).headings.map((year, id) => <td key={id}>{year.count}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && marketing && marketing.inputs && marketing.inputs.length > 0 && getQuarter(marketing.inputs).headings.map((quarter, id) => <td key={id}>{quarter.count}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && marketing && marketing.inputs && getMonthDetails(marketing.inputs).headings.map((month, id) => <td key={id}>{month.count}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Salaries</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && Object.keys(getYear(marketing.inputs).salaries).map((data, id) => <td key={id}>${getYear(marketing.inputs).salaries[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetQuarter(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getQuarter(marketing.inputs).salaries).map((quarter, id) => <td key={id}>${getQuarter(marketing.inputs).salaries[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetMonthDetails(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getMonthDetails(marketing.inputs).salaries).map((month, id) => <td key={id}>${getMonthDetails(marketing.inputs).salaries[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Benifits & Taxes</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && Object.keys(getYear(marketing.inputs).taxes).map((data, id) => <td key={id}>${getYear(marketing.inputs).taxes[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetQuarter(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getQuarter(marketing.inputs).taxes).map((quarter, id) => <td key={id}>${getQuarter(marketing.inputs).taxes[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetMonthDetails(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getMonthDetails(marketing.inputs).taxes).map((month, id) => <td key={id}>${getMonthDetails(marketing.inputs).taxes[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Commissions</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && Object.keys(getYear(marketing.inputs).commissions).map((data, id) => <td key={id}>${getYear(marketing.inputs).commissions[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetQuarter(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getQuarter(marketing.inputs).commissions).map((quarter, id) => <td key={id}>${getQuarter(marketing.inputs).commissions[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetMonthDetails(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getMonthDetails(marketing.inputs).commissions).map((month, id) => <td key={id}>${getMonthDetails(marketing.inputs).commissions[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Total Payroll</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && marketing && marketing.inputs && Object.keys(getYear(marketing.inputs).total).map((data, id) => <td key={id}>${getYear(marketing.inputs).total[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetQuarter(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getQuarter(marketing.inputs).total).map((quarter, id) => <td key={id}>${getQuarter(marketing.inputs).total[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' &&\n\t\t\t\t\t\t\t\t\t\tmarketing &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetMonthDetails(marketing.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getMonthDetails(marketing.inputs).total).map((month, id) => <td key={id}>${getMonthDetails(marketing.inputs).total[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='col-8 col-xl-7'>\n\t\t\t\t\t<h4>Marketing Inputs</h4>\n\t\t\t\t\t<MarketingInputs marketing={marketing} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />\n\t\t\t\t</div>\n\t\t\t\t<div className='col-4 col-xl-5'>\n\t\t\t\t\t<h4>Major Expense Input</h4>\n\t\t\t\t\t{marketing && marketing._id && <ExpenseInputs marketingId={marketing._id} expenseInputs={marketing.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t) : (\n\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t<strong>Please subscribe our product to use the app</strong>\n\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Marketing;\n","/home/yamin/Downloads/work/finpro/src/views/Sales/Sales.js",[],"/home/yamin/Downloads/work/finpro/src/views/GandA/GandA.js",["225","226"],"import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Bar } from 'react-chartjs-2';\nimport { FormControl, InputBase, NativeSelect } from '@material-ui/core';\nimport { AuthContext } from '../../context/context';\nimport { useHistory } from 'react-router-dom';\n\nimport { ButtonGroup, Button } from 'react-bootstrap';\nimport { getInputs } from '../../context/fetch-service';\n\nimport autoTable from 'jspdf-autotable';\nimport { CSVLink } from 'react-csv';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\n\nimport GandAInputs from './GandAInputs';\nimport ExpenseInputs from './ExpenseInputs';\n\nimport { getYear, getQuarter, getMonthDetails } from '../../utils/utils';\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'center',\n\t},\n}));\n\nconst BootstrapInput = withStyles((theme) => ({\n\troot: {\n\t\t'label + &': {\n\t\t\tmarginTop: theme.spacing(3),\n\t\t},\n\t},\n\tinput: {\n\t\tborderRadius: 4,\n\t\tposition: 'relative',\n\t\tbackgroundColor: '#f8f9fa',\n\t\t// border: '1px solid #ced4da',\n\t\tfontSize: 16,\n\t\tpadding: '10px 26px 10px 12px',\n\t\ttransition: theme.transitions.create(['border-color', 'box-shadow']),\n\t\t// Use the system font instead of the default Roboto font.\n\t\tfontFamily: ['-apple-system', 'BlinkMacSystemFont', '\"Segoe UI\"', 'Roboto', '\"Helvetica Neue\"', 'Arial', 'sans-serif', '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'].join(','),\n\t\t'&:focus': {\n\t\t\tborderRadius: 4,\n\t\t\tborderColor: '#80bdff',\n\t\t\tboxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n\t\t},\n\t},\n}))(InputBase);\n\nfunction GandA() {\n\tconst history = useHistory();\n\tconst classes = useStyles();\n\tconst {\n\t\tstate: { purchasing, inputs, data, isAuthenticated },\n\t\tdispatch,\n\t} = React.useContext(AuthContext);\n\n\tconst ganda = inputs.filter((i) => i.title === 'ganda')[0];\n\tconst userSub = purchasing && purchasing.length > 0 ? purchasing.filter((sub) => sub.status === 'active') : [];\n\n\tconst [chartValue, setChartValue] = React.useState('year');\n\tconst handleChange = (event) => {\n\t\tsetChartValue(event.target.value);\n\t};\n\n\tconst [msg, setMsg] = React.useState('');\n\tconst [err, setErr] = React.useState('');\n\tconst [alertClass, setAlertClass] = React.useState(userSub && userSub.length > 0 ? '' : 'show');\n\tconst [csvData, setCsvData] = React.useState('');\n\n\tconst handleCloseAlert = () => {\n\t\tsetAlertClass('hide');\n\t\tsetErr('');\n\t\tsetMsg('');\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (!isAuthenticated) {\n\t\t\thistory.push('/login');\n\t\t}\n\t\tasync function fetchRevenue() {\n\t\t\tlet inputs = await getInputs();\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\tpayload: inputs,\n\t\t\t});\n\t\t}\n\t\tfetchRevenue();\n\t}, [isAuthenticated, history, dispatch]);\n\n\tconst generatePdf = () => {\n\t\tconst doc = new jsPDF();\n\t\tautoTable(doc, { html: '#ganda-table', startY: 20 });\n\t\tconst date = Date().split(' ');\n\t\t// we use a date string to generate our filename.\n\t\tconst dateStr = date[0] + date[1] + date[2] + date[3] + date[4];\n\t\t// ticket title. and margin-top + margin-left\n\t\tdoc.text('Next Five Year Data', 14, 15);\n\t\t// we define the name of our PDF file.\n\t\tdoc.save(`report_${dateStr}.pdf`);\n\t};\n\n\tconst generateCSV = () => {\n\t\tif (ganda && ganda.inputs && ganda.inputs.length > 0) {\n\t\t\tlet str = '';\n\t\t\tif (chartValue === 'year') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Year ,' +\n\t\t\t\t\tgetYear(ganda.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => new Date(year.startDate).getFullYear())\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetYear(ganda.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getYear(ganda.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getYear(ganda.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getYear(ganda.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getYear(ganda.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t} else if (chartValue === 'quarter') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Quarter ,' +\n\t\t\t\t\tgetQuarter(ganda.inputs)\n\t\t\t\t\t\t.headings.map((quarter, id) => quarter.quarter)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetQuarter(ganda.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getQuarter(ganda.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getQuarter(ganda.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getQuarter(ganda.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getQuarter(ganda.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t} else if (chartValue === 'month') {\n\t\t\t\tstr +=\n\t\t\t\t\t'Monthly ,' +\n\t\t\t\t\tgetMonthDetails(ganda.inputs)\n\t\t\t\t\t\t.headings.map((month, id) => month.month)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Headingcount ,' +\n\t\t\t\t\tgetMonthDetails(ganda.inputs)\n\t\t\t\t\t\t.headings.map((year, id) => year.count)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Salaries ,' +\n\t\t\t\t\tObject.values(getMonthDetails(ganda.inputs).salaries)\n\t\t\t\t\t\t.map((salary) => salary)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Taxes ,' +\n\t\t\t\t\tObject.values(getMonthDetails(ganda.inputs).taxes)\n\t\t\t\t\t\t.map((tax) => tax)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Commissions ,' +\n\t\t\t\t\tObject.values(getMonthDetails(ganda.inputs).commissions)\n\t\t\t\t\t\t.map((com) => com)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t\tstr +=\n\t\t\t\t\t'Total Payroll ,' +\n\t\t\t\t\tObject.values(getMonthDetails(ganda.inputs).total)\n\t\t\t\t\t\t.map((tot) => tot)\n\t\t\t\t\t\t.join(',') +\n\t\t\t\t\t',\\n';\n\t\t\t}\n\t\t\tconsole.log(str);\n\t\t\tsetCsvData(str);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t};\n\n\treturn userSub && userSub.length > 0 ? (\n\t\t<div className='container-fluid'>\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-12 col-xl-12'>\n\t\t\t\t\t{msg && (\n\t\t\t\t\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t<strong>{msg}</strong>\n\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{err && (\n\t\t\t\t\t\t<div className={`alert alert-danger alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t<strong>{err}</strong>\n\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<div className='table-container-header'>\n\t\t\t\t\t\t<h4 className=''>G&A</h4>\n\t\t\t\t\t\t<div className='chart-handle-grup'>\n\t\t\t\t\t\t\t<div className='chart-dropdown'>\n\t\t\t\t\t\t\t\t<span className='mr-3'>View By :</span>\n\t\t\t\t\t\t\t\t<FormControl variant='outlined' className={classes.margin}>\n\t\t\t\t\t\t\t\t\t<NativeSelect id='demo-customized-select-native' value={chartValue} onChange={handleChange} input={<BootstrapInput />}>\n\t\t\t\t\t\t\t\t\t\t<option defaultValue='year' value='year'>\n\t\t\t\t\t\t\t\t\t\t\tYear\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t<option value='quarter'>Quarter</option>\n\t\t\t\t\t\t\t\t\t\t<option value='month'>Month</option>\n\t\t\t\t\t\t\t\t\t</NativeSelect>\n\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ButtonGroup aria-label='Basic example'>\n\t\t\t\t\t\t\t\t<span className='btn-custom-group'>Export</span>\n\t\t\t\t\t\t\t\t<Button onClick={generateCSV} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\t{ganda && ganda.inputs && ganda.inputs.length > 0 ? (\n\t\t\t\t\t\t\t\t\t\t<CSVLink className='csv-download-btn' onClick={generateCSV} filename={'data.csv'} data={csvData}>\n\t\t\t\t\t\t\t\t\t\t\tCSV\n\t\t\t\t\t\t\t\t\t\t</CSVLink>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t'CSV'\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button onClick={generatePdf} className='btn-custom-group'>\n\t\t\t\t\t\t\t\t\tPDF\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</ButtonGroup>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='custom-table-container'>\n\t\t\t\t\t\t<table id='ganda-table'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && getYear(ganda.inputs).headings.map((year, id) => <th key={id}>{new Date(year.startDate).getFullYear()}</th>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && getQuarter(ganda.inputs).headings.map((quarter, id) => <th key={id}>{quarter.quarter}</th>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && ganda && ganda.inputs && getMonthDetails(ganda.inputs).headings.map((month, id) => <th key={id}>{month.month}</th>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Headcounts</th>\n\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && getYear(ganda.inputs).headings.map((year, id) => <td key={id}>{year.count}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && ganda.inputs.length > 0 && getQuarter(ganda.inputs).headings.map((quarter, id) => <td key={id}>{quarter.count}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && ganda && ganda.inputs && getMonthDetails(ganda.inputs).headings.map((month, id) => <td key={id}>{month.count}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Salaries</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && Object.keys(getYear(ganda.inputs).salaries).map((data, id) => <td key={id}>${getYear(ganda.inputs).salaries[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && ganda.inputs.length > 0 && getQuarter(ganda.inputs) && Object.keys(getQuarter(ganda.inputs).salaries).map((quarter, id) => <td key={id}>${getQuarter(ganda.inputs).salaries[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && ganda && ganda.inputs && ganda.inputs.length > 0 && getMonthDetails(ganda.inputs) && Object.keys(getMonthDetails(ganda.inputs).salaries).map((month, id) => <td key={id}>${getMonthDetails(ganda.inputs).salaries[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Benifits & Taxes</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && Object.keys(getYear(ganda.inputs).taxes).map((data, id) => <td key={id}>${getYear(ganda.inputs).taxes[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && ganda.inputs.length > 0 && getQuarter(ganda.inputs) && Object.keys(getQuarter(ganda.inputs).taxes).map((quarter, id) => <td key={id}>${getQuarter(ganda.inputs).taxes[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && ganda && ganda.inputs && ganda.inputs.length > 0 && getMonthDetails(ganda.inputs) && Object.keys(getMonthDetails(ganda.inputs).taxes).map((month, id) => <td key={id}>${getMonthDetails(ganda.inputs).taxes[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Commissions</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && Object.keys(getYear(ganda.inputs).commissions).map((data, id) => <td key={id}>${getYear(ganda.inputs).commissions[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && ganda.inputs.length > 0 && getQuarter(ganda.inputs) && Object.keys(getQuarter(ganda.inputs).commissions).map((quarter, id) => <td key={id}>${getQuarter(ganda.inputs).commissions[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' &&\n\t\t\t\t\t\t\t\t\t\tganda &&\n\t\t\t\t\t\t\t\t\t\tganda.inputs &&\n\t\t\t\t\t\t\t\t\t\tganda.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\t\tgetMonthDetails(ganda.inputs) &&\n\t\t\t\t\t\t\t\t\t\tObject.keys(getMonthDetails(ganda.inputs).commissions).map((month, id) => <td key={id}>${getMonthDetails(ganda.inputs).commissions[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>Total Payroll</th>\n\t\t\t\t\t\t\t\t\t{chartValue === 'year' && ganda && ganda.inputs && Object.keys(getYear(ganda.inputs).total).map((data, id) => <td key={id}>${getYear(ganda.inputs).total[data].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'quarter' && ganda && ganda.inputs && ganda.inputs.length > 0 && getQuarter(ganda.inputs) && Object.keys(getQuarter(ganda.inputs).total).map((quarter, id) => <td key={id}>${getQuarter(ganda.inputs).total[quarter].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t\t{chartValue === 'month' && ganda && ganda.inputs && ganda.inputs.length > 0 && getMonthDetails(ganda.inputs) && Object.keys(getMonthDetails(ganda.inputs).total).map((month, id) => <td key={id}>${getMonthDetails(ganda.inputs).total[month].toFixed(2)}</td>)}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className='col-8 col-xl-7'>\n\t\t\t\t\t<h4>G & A Inputs</h4>\n\t\t\t\t\t<GandAInputs ganda={ganda} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />\n\t\t\t\t</div>\n\t\t\t\t<div className='col-4 col-xl-5'>\n\t\t\t\t\t<h4>Major Expense Input</h4>\n\t\t\t\t\t{ganda && ganda._id && <ExpenseInputs gandaId={ganda._id} expenseInputs={ganda.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t) : (\n\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t<strong>Please subscribe our product to use the app</strong>\n\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default GandA;\n",["227","228"],"/home/yamin/Downloads/work/finpro/src/App.js",[],"/home/yamin/Downloads/work/finpro/src/views/Auth/SignUp/SignUp.js",["229"],"/home/yamin/Downloads/work/finpro/src/context/context.js",[],"/home/yamin/Downloads/work/finpro/src/views/Revenue/Revenue.js",[],"/home/yamin/Downloads/work/finpro/src/views/Auth/Login/Login.js",["230","231"],"/home/yamin/Downloads/work/finpro/src/routes.js",[],"/home/yamin/Downloads/work/finpro/src/views/Checkout/Checkout.js",[],"/home/yamin/Downloads/work/finpro/src/context/axios.js",[],"/home/yamin/Downloads/work/finpro/src/index.js",[],"/home/yamin/Downloads/work/finpro/src/views/Settings/Settings.js",[],"/home/yamin/Downloads/work/finpro/src/views/Pricing/Pricing.js",["232","233","234","235","236","237"],"/home/yamin/Downloads/work/finpro/src/views/Billing/Billing.js",["238"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { getUserPaymentMethods, getUserPurchasing } from '../../context/fetch-service';\nimport { AuthContext } from '../../context/context';\nimport { useHistory } from 'react-router-dom';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport Visa from '../../assets/visa.svg';\nimport MasterCard from '../../assets/mastercard.svg';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { PaymentInputsWrapper, usePaymentInputs } from 'react-payment-inputs';\nimport images from 'react-payment-inputs/images';\n\nimport { addPayment, deletePayment } from '../../context/payment-service';\nimport { userInvoices } from '../../context/subscription-service';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nconst ITEM_HEIGHT = 48;\nconst useStyles = makeStyles((theme) => ({}));\nfunction Billing() {\n\tconst { meta, wrapperProps, getCardImageProps, getCardNumberProps, getExpiryDateProps, getCVCProps } = usePaymentInputs();\n\tconst classes = useStyles();\n\tconst history = useHistory();\n\tconst {\n\t\tstate: { billingDetails, invoices, purchasing, isAuthenticated },\n\t\tdispatch,\n\t} = React.useContext(AuthContext);\n\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\tconst menuOpen = Boolean(anchorEl);\n\n\tconst handleMenuClick = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleMenuClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\tconst [msg, setMsg] = React.useState('');\n\tconst [err, setErr] = React.useState('');\n\n\tconst [msg2, setMsg2] = React.useState('');\n\tconst [err2, setErr2] = React.useState('');\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [alertClass, setAlertClass] = React.useState('');\n\tconst [paymentForm, setPaymentForm] = React.useState({\n\t\tcity: '',\n\t\tstate: '',\n\t\taddress: '',\n\t\tcardNumber: '',\n\t\texpiryDate: '',\n\t\tcvc: '',\n\t});\n\n\tconst handleCloseAlert = () => {\n\t\tsetAlertClass('hide');\n\t\tsetErr('');\n\t\tsetMsg('');\n\t\tsetErr2('');\n\t\tsetMsg2('');\n\t};\n\n\tconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n\t\t<span\n\t\t\tclassName={classes.ProfileIcon}\n\t\t\tref={ref}\n\t\t\tonClick={(e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\tonClick(e);\n\t\t\t}}>\n\t\t\t{/* Render custom icon here */}\n\t\t\t{children}\n\t\t</span>\n\t));\n\n\tReact.useEffect(() => {\n\t\tif (!isAuthenticated) {\n\t\t\thistory.push('/login');\n\t\t}\n\t\tasync function fetchRevenue() {\n\t\t\tlet billings = await getUserPaymentMethods();\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_BILLING',\n\t\t\t\tpayload: billings,\n\t\t\t});\n\t\t\tlet purchasing = await getUserPurchasing();\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_PURCHASING',\n\t\t\t\tpayload: purchasing.filter((purc) => purc.status === 'active'),\n\t\t\t});\n\t\t\tlet invoices = await userInvoices();\n\t\t\tdispatch({\n\t\t\t\ttype: 'SET_INVOICES',\n\t\t\t\tpayload: invoices,\n\t\t\t});\n\t\t}\n\t\tfetchRevenue();\n\t}, [isAuthenticated, history, dispatch]);\n\n\tconst handlePaymentFormChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetPaymentForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetPaymentForm({\n\t\t\tcity: '',\n\t\t\tstate: '',\n\t\t\taddress: '',\n\t\t\tcardNumber: '',\n\t\t\texpiryDate: '',\n\t\t\tcvc: '',\n\t\t});\n\t\tsetErr('');\n\t\tsetMsg('');\n\t\tsetErr2('');\n\t\tsetMsg2('');\n\t};\n\tconst handleSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tsetLoader(true);\n\t\tconsole.log(meta);\n\t\tif (meta.error) {\n\t\t\tsetErr2(meta.error);\n\t\t\tsetLoader(false);\n\t\t\treturn;\n\t\t}\n\t\tconsole.log(paymentForm);\n\t\tlet data = {\n\t\t\tcity: paymentForm.city,\n\t\t\tstate: paymentForm.state,\n\t\t\taddress: paymentForm.address,\n\t\t\tnumber: paymentForm.cardNumber.split(' ').join(''),\n\t\t\texp_month: paymentForm.expiryDate ? paymentForm.expiryDate.split('/')[0].trim() : '',\n\t\t\texp_year: paymentForm.expiryDate ? paymentForm.expiryDate.split('/')[1].trim() : '',\n\t\t\tcvc: paymentForm.cvc,\n\t\t};\n\n\t\ttry {\n\t\t\tlet addPaymentMethod = await addPayment(data);\n\n\t\t\tif (addPaymentMethod.status === 200) {\n\t\t\t\tlet billings = await getUserPaymentMethods();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_BILLING',\n\t\t\t\t\tpayload: billings,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg2(addPaymentMethod.data.message);\n\t\t\t\tsetErr2('');\n\t\t\t\tsetPaymentForm({\n\t\t\t\t\tcity: '',\n\t\t\t\t\tstate: '',\n\t\t\t\t\taddress: '',\n\t\t\t\t\tcardNumber: '',\n\t\t\t\t\texpiryDate: '',\n\t\t\t\t\tcvc: '',\n\t\t\t\t});\n\t\t\t\t// setOpen(false);\n\t\t\t\tsetLoader(false);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg2('');\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tif (err.response.data.error && err.response.data.error.raw) {\n\t\t\t\t\t\tsetErr2(err.response.data.error.raw.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetErr2(err.response.data.error.message);\n\t\t\t\t\t}\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tconsole.log(err.response.data.errors);\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr2(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr2(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr2(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t};\n\n\tconst deletePaymentMethods = async (id) => {\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tlet deletePaymentMethod = await deletePayment(id);\n\n\t\t\tif (deletePaymentMethod.status === 200) {\n\t\t\t\tlet billings = await getUserPaymentMethods();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_BILLING',\n\t\t\t\t\tpayload: billings,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePaymentMethod.data.message);\n\t\t\t\tsetErr('');\n\t\t\t\tsetLoader(false);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tif (err.response.data.error && err.response.data.error.raw) {\n\t\t\t\t\t\tsetErr(err.response.data.error.raw.message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t\t}\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\thandleMenuClose();\n\t};\n\treturn (\n\t\t<div className='container'>\n\t\t\t{msg && (\n\t\t\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t<strong>{msg}</strong>\n\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t{err && (\n\t\t\t\t<div className={`alert alert-danger alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t<strong>{err}</strong>\n\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{'Add Payment Method'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t{msg2 && (\n\t\t\t\t\t\t\t\t<div className={`alert alert-success alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t\t\t<strong>{msg2}</strong>\n\t\t\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{err2 && (\n\t\t\t\t\t\t\t\t<div className={`alert alert-danger alert-dismissible fade ${alertClass}`} role='alert'>\n\t\t\t\t\t\t\t\t\t<strong>{err2}</strong>\n\t\t\t\t\t\t\t\t\t<button onClick={handleCloseAlert} type='button' className='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t\t\t\t\t\t\t\t<span aria-hidden='true'>×</span>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\tCity\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='city' value={paymentForm.city} onChange={handlePaymentFormChange} className='form-control' id='city' placeholder='City' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='state' className='form-label'>\n\t\t\t\t\t\t\t\t\tState\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='state' value={paymentForm.state} onChange={handlePaymentFormChange} className='form-control' id='state' placeholder='State' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='address' className='form-label'>\n\t\t\t\t\t\t\t\t\tAddress\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='address' value={paymentForm.address} onChange={handlePaymentFormChange} className='form-control' id='address' placeholder='Address' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<label className='form-label'>Card Details</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<PaymentInputsWrapper {...wrapperProps}>\n\t\t\t\t\t\t\t\t\t<svg {...getCardImageProps({ images })} />\n\t\t\t\t\t\t\t\t\t<input name='number' {...getCardNumberProps({ onChange: handlePaymentFormChange })} value={paymentForm.cardNumber} />\n\t\t\t\t\t\t\t\t\t<input name='exp_date' {...getExpiryDateProps({ onChange: handlePaymentFormChange })} value={paymentForm.expiryDate} />\n\t\t\t\t\t\t\t\t\t<input name='cvc' {...getCVCProps({ onChange: handlePaymentFormChange })} value={paymentForm.cvc} />\n\t\t\t\t\t\t\t\t</PaymentInputsWrapper>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && 'Add Payment Method'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-12 col-lg-12'>\n\t\t\t\t\t<h1 className='page-headings'>Billing</h1>\n\n\t\t\t\t\t<div className='card pt-4 pb-4 pl-4 pr-4'>\n\t\t\t\t\t\t<div className='row'>\n\t\t\t\t\t\t\t<div className='col'>\n\t\t\t\t\t\t\t\t<div className='billing-plan'>{purchasing && purchasing.length > 0 ? \"You're currently on intro plan\" : 'You did not have any plan'}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='col-auto'>\n\t\t\t\t\t\t\t\t<button onClick={() => history.push('/pricing')} className='btn btn-custom btn-padd'>\n\t\t\t\t\t\t\t\t\tManage plan\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='mt-4 mb-4'></div>\n\t\t\t\t<div className='card'>\n\t\t\t\t\t<div className='card-header card-heading'>\n\t\t\t\t\t\t<div className='row align-items-center'>\n\t\t\t\t\t\t\t<div className='col'>\n\t\t\t\t\t\t\t\t<h4 className='card-header-title'>Payment methods</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='col-auto'>\n\t\t\t\t\t\t\t\t<button onClick={handleClickOpen} className='btn btn-sm btn-custom'>\n\t\t\t\t\t\t\t\t\tAdd method\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t<div className='list-group list-group-flush my-n3'>\n\t\t\t\t\t\t\t{billingDetails &&\n\t\t\t\t\t\t\t\tbillingDetails.length > 0 &&\n\t\t\t\t\t\t\t\tbillingDetails.map((billing, id) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div key={id} className='list-group-item'>\n\t\t\t\t\t\t\t\t\t\t\t<div className='row align-items-center'>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-auto'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<img className='img-fluid' src={billing.paymentMethod.card.brand === 'visa' ? Visa : MasterCard} alt='visa' style={{ maxWidth: '38px' }} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='col ml-n2'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 className='mb-1'>Visa ending in {billing.paymentMethod.card.exp_year}</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<small className='text-muted'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tExpires {billing.paymentMethod.card.exp_month}/{billing.paymentMethod.card.exp_year}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-auto mr-n3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='badge bg-light'>{billing.type}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-auto'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label='more' aria-controls='long-menu' aria-haspopup='true' onClick={handleMenuClick}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MoreVertIcon />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Menu\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid='long-menu'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tanchorEl={anchorEl}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkeepMounted\n\t\t\t\t\t\t\t\t\t\t\t\t\t\topen={menuOpen}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClose={handleMenuClose}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPaperProps={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmaxHeight: ITEM_HEIGHT * 4.5,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twidth: '20ch',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<MenuItem onClick={() => deletePaymentMethods(billing._id)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Delete'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Menu>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='mt-2 mb-2'></div>\n\t\t\t\t<div className='card'>\n\t\t\t\t\t<div className='card-header card-heading'>\n\t\t\t\t\t\t<div className='row align-items-center'>\n\t\t\t\t\t\t\t<div className='col'>\n\t\t\t\t\t\t\t\t<h4 className='card-header-title'>Payment History</h4>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='payment-history-table'>\n\t\t\t\t\t\t<table class='table table-hover table-nowrap'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Transaction Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Item</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Amount</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Status</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{invoices &&\n\t\t\t\t\t\t\t\t\tinvoices.length > 0 &&\n\t\t\t\t\t\t\t\t\tinvoices.map((inv, id) => (\n\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t<td>{new Date(inv.created * 1000).getDate() + '/' + (new Date(inv.created * 1000).getMonth() + 1) + '/' + new Date(inv.created * 1000).getFullYear()}</td>\n\n\t\t\t\t\t\t\t\t\t\t\t<td>Intro</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>$19.00</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<span className={['badge', inv.status === 'paid' ? ' bg-success' : ' bg-secondary'].join('')}>{inv.status}</span>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Billing;\n","/home/yamin/Downloads/work/finpro/src/service.js",[],"/home/yamin/Downloads/work/finpro/src/context/types.js",[],"/home/yamin/Downloads/work/finpro/src/context/fetch-service.js",[],"/home/yamin/Downloads/work/finpro/src/context/revenue-service.js",[],"/home/yamin/Downloads/work/finpro/src/views/Revenue/RevenueInputs.js",["239"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addPlan, deletePlan, updatePlan } from '../../context/revenue-service';\nimport { AuthContext } from '../../context/context';\nimport { getRevenue } from '../../context/fetch-service';\nimport { colors } from '../../context/colors';\nimport moment from 'moment';\n\nfunction RevenueInputs({ revenues, setMsg, setErr, setAlertClass, chartValue }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [revenueForm, setRevenueForm] = React.useState({\n\t\tplan: '',\n\t\tprice: '',\n\t\tpurchasers: '',\n\t\ttype: 'Yearly',\n\t\tdate: '',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetRevenueForm({\n\t\t\tplan: '',\n\t\t\tprice: '',\n\t\t\tpurchasers: '',\n\t\t\ttype: 'Yearly',\n\t\t\tdate: '',\n\t\t});\n\t};\n\n\tconst handleRevenueChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetRevenueForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updatePlan({ revenueId: revenueForm.revenueId, revenueInputId: revenueForm.revenueInputId, data: revenueForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t\tdispatch({ type: 'VIEW_DATA', payload: chartValue });\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trevenueForm.color = colors[Math.floor(Math.random() * colors.length - 1)];\n\t\t\t\tlet add = await addPlan(revenueForm);\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t\tdispatch({ type: 'VIEW_DATA', payload: chartValue });\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetRevenueForm({\n\t\t\tplan: '',\n\t\t\tprice: '',\n\t\t\tpurchasers: '',\n\t\t\ttype: 'Yearly',\n\t\t\tdate: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (data) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deletePlan(data);\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\tpayload: revenues,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t\tdispatch({ type: 'VIEW_DATA', payload: chartValue });\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (revenueId, revenueInputId, rev) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetRevenueForm({\n\t\t\tplan: rev.plan,\n\t\t\tprice: rev.price,\n\t\t\tpurchasers: rev.purchasers,\n\t\t\ttype: rev.type,\n\t\t\tdate: rev.date ? moment(rev.date).format('YYYY-MM-DD') : new Date(),\n\t\t\trevenueId,\n\t\t\trevenueInputId,\n\t\t});\n\t};\n\treturn (\n\t\t<div className='card'>\n\t\t\t<div>\n\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope='col'>Plan Name</th>\n\t\t\t\t\t\t\t\t<th scope='col'>Price</th>\n\t\t\t\t\t\t\t\t<th scope='col'>purchasers</th>\n\t\t\t\t\t\t\t\t<th scope='col'>Annually vs Monthly</th>\n\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t<i title='Add Plan' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Plan' : 'Add Plan'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='plan' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPlan\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='plan' value={revenueForm.plan} onChange={handleRevenueChange} className='form-control' id='plan' placeholder='Plan' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='price' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPrice\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='price' value={revenueForm.price} onChange={handleRevenueChange} className='form-control' id='price' placeholder='Price' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='purchasers' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPurchasers\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='purchasers' value={revenueForm.purchasers} onChange={handleRevenueChange} className='form-control' id='purchasers' placeholder='Purchasers' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='type' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select name='type' onChange={handleRevenueChange} className='form-control' id='type' placeholder='Password' required>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option selected={revenueForm.type === 'Yearly'} value='Yearly'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYearly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option selected={revenueForm.type === 'Quarter'} value='Quarter'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tQuarter\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option selected={revenueForm.type === 'Monthly'} value='Monthly'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tMonthly\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='date' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDate\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='date' name='date' value={revenueForm.date} onChange={handleRevenueChange} className='form-control' id='date' placeholder='Date' />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Plan' : 'Add Plan')}\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{revenues &&\n\t\t\t\t\t\t\t\trevenues.revenuInputs &&\n\t\t\t\t\t\t\t\trevenues.revenuInputs.length > 0 &&\n\t\t\t\t\t\t\t\trevenues.revenuInputs.map((rev, id) => (\n\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t<td>{rev.plan}</td>\n\t\t\t\t\t\t\t\t\t\t<td>${rev.price}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{rev.purchasers}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{rev.type}</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditPlan(revenues._id, rev._id, rev)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeletePlan({ revenueId: revenues._id, revenueInputId: rev._id })} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default RevenueInputs;\n","/home/yamin/Downloads/work/finpro/src/views/Revenue/ExpenseInputs.js",["240"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nimport { AuthContext } from '../../context/context';\nimport { getRevenue } from '../../context/fetch-service';\nimport { addExpense, deleteExpense, updateExpense } from '../../context/revenue-service';\n\nfunction ExpenseInputs({ revenueId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [open2, setOpen2] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClickOpen2 = () => {\n\t\tsetOpen2(true);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t});\n\n\tconst handleClose2 = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen2(false);\n\t\tsetEdit(false);\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t};\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t};\n\n\tconst handleRevenueChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateExpense({ revenueId, expenseInputId: expenseForm.expenseInputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addExpense({ ...expenseForm, revenueId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t\tsetOpen(false);\n\t\tsetOpen2(false);\n\t};\n\n\tconst handleDeletePlan = async (majorExpenseInputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteExpense({ revenueId, majorExpenseInputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\tpayload: revenues,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expenseInputId, expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\texpenseInputId,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Credit Card Porcessing Fees</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add Major Expense' style={{ fontSize: '22px' }} onClick={handleClickOpen} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={(e) => handleSubmit(e, 'creditCardProcessingFees')}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCredit Card Processing Fees\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleRevenueChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleRevenueChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'creditCardProcessingFees')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-edit edit-icon' onClick={() => handleEditPlan(expInp._id, expInp)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Paid User Acquisition</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add Major' style={{ fontSize: '22px' }} onClick={handleClickOpen2} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open2} onClose={handleClose2} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Plan'}</DialogTitle>\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={(e) => handleSubmit(e, 'paidUserAcquisition')}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPaid User Acquisition\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleRevenueChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleRevenueChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose2}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'paidUserAcquisition')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-edit edit-icon' onClick={() => handleEditPlan(expInp._id, expInp)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n",["241","242"],"/home/yamin/Downloads/work/finpro/src/views/Revenue/StartingCapitalInput.js",["243"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addStartingCapital, deleteStartignCapital, updateStartingCapital } from '../../context/revenue-service';\nimport { AuthContext } from '../../context/context';\nimport { getRevenue } from '../../context/fetch-service';\n\nfunction StartingCapitalInput({ revenueId, startingCapital, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [startingCapitalForm, setStartingCapitalForm] = React.useState({\n\t\tsource: '',\n\t\tamount: '',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetStartingCapitalForm({\n\t\t\tsource: '',\n\t\t\tamount: '',\n\t\t});\n\t};\n\n\tconst handleRevenueChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetStartingCapitalForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateStartingCapital({ revenueId: revenueId, startingCapitalId: startingCapitalForm.startingCapitalId, data: startingCapitalForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addStartingCapital({ ...startingCapitalForm, revenueId });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\t\tpayload: revenues,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetStartingCapitalForm({\n\t\t\tsource: '',\n\t\t\tamount: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (startingCapitalId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteStartignCapital({ revenueId, startingCapitalId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet revenues = await getRevenue();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_REVENUE',\n\t\t\t\t\tpayload: revenues,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (startingCapitalId, rev) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetStartingCapitalForm({\n\t\t\tsource: rev.source,\n\t\t\tamount: rev.amount,\n\t\t\tstartingCapitalId,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className='card'>\n\t\t\t<div>\n\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th scope='col'>Source</th>\n\t\t\t\t\t\t\t\t<th scope='col'>Amount</th>\n\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t<i title='Add Plan' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Starting Capital' : 'Add Starting Capital'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='source' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSource\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='source' value={startingCapitalForm.source} onChange={handleRevenueChange} className='form-control' id='source' placeholder='Source' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='amount' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAmount\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='amount' value={startingCapitalForm.amount} onChange={handleRevenueChange} className='form-control' id='amount' placeholder='Amount' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Starting Capital' : 'Add Starting Capital')}\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{startingCapital &&\n\t\t\t\t\t\t\t\tstartingCapital.map((rev, id) => (\n\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t<td>{rev.source}</td>\n\t\t\t\t\t\t\t\t\t\t<td>${rev.amount}</td>\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditPlan(rev._id, rev)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeletePlan(rev._id)} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default StartingCapitalInput;\n","/home/yamin/Downloads/work/finpro/src/views/Sales/ExpenseInputs.js",["244"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ salesId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t\tperEmployee: '',\n\t\tdate: '',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false)\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t\tperEmployee: '',\n\t\t\tdate: '',\n\t\t});\n\t};\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: salesId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: salesId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t\tperEmployee: '',\n\t\t\tdate: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: salesId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tperEmployee: expInp.perEmployee,\n\t\t\tdate: expInp.date,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t{dialogSetting.type === 'date' ? (\n\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='date' className='form-label'>\n\t\t\t\t\t\t\t\t\t\tDate\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type='date' name='date' value={expenseForm.date} onChange={handleInputChange} className='form-control' id='date' placeholder='Date' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='perEmployee' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t{dialogSetting.employee}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type='text' name='perEmployee' value={expenseForm.perEmployee} onChange={handleInputChange} className='form-control' id='perEmployee' placeholder={dialogSetting.employee} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Equipment & Telecom</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per new Employee</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'equipmentAndTelecom')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Dues & Subscriptions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\tPer new Employee <br /> (per month)\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscription',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'duesAnsSubscriptions')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Travel & Entertainment</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per Employee (per month)</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'travelAndEntertainment')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainments',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Others</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'others')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.date}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/views/Sales/SalesInputs.js",["245"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addInputs, deleteInputs, updateInputs } from '../../context/input-service';\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { getMonthName, Months } from '../../utils/utils';\nimport moment from 'moment';\n\nimport ContractExpense from './ContractorExpense';\n\nfunction SalesInputs({ sales, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [salesInputForm, setSalesInputForm] = React.useState({\n\t\thire: '',\n\t\tstartDate: '',\n\t\tsalary: '',\n\t\ttaxes: '',\n\t\tcommissions: '',\n\t\ttitle: 'sales',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetSalesInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'sales',\n\t\t});\n\t};\n\n\tconst handleSalesChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetSalesInputForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputs({ inputMainId: sales._id, inputId: salesInputForm.inputId, data: salesInputForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputs(salesInputForm);\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetSalesInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'sales',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeleteInput = async (data) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputs(data);\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditInput = (input) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetSalesInputForm({\n\t\t\thire: input.hire,\n\t\t\tstartDate: moment(input.date).format('YYYY-MM-DD'),\n\t\t\tsalary: input.salary,\n\t\t\ttaxes: input.taxes,\n\t\t\tcommissions: input.commissions,\n\t\t\ttitle: 'sales',\n\t\t\tinputId: input._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Hire</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Start Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Salary</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Taxes</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Commissions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add Sales Inputs' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Sales' : 'Add Sales'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='hire' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHire\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='hire' value={salesInputForm.hire} onChange={handleSalesChange} className='form-control' id='hire' placeholder='Hire' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='startDate' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tStart Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='date' name='startDate' value={salesInputForm.startDate} onChange={handleSalesChange} className='form-control' id='date' placeholder='Start Date' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='salary' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSalary\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='salary' value={salesInputForm.salary} onChange={handleSalesChange} className='form-control' id='salary' placeholder='Salary' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='taxes' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTaxes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='taxes' value={salesInputForm.taxes} onChange={handleSalesChange} className='form-control' id='taxes' placeholder='Taxes' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='commissions' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCommissions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='commissions' value={salesInputForm.commissions} onChange={handleSalesChange} className='form-control' id='commissions' placeholder='Commissions' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Sales' : 'Add Sales')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{sales &&\n\t\t\t\t\t\t\t\t\tsales.inputs &&\n\t\t\t\t\t\t\t\t\tsales.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\tsales.inputs\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\t\tif (new Date(a.startDate).getFullYear() !== new Date(b.startDate).getFullYear()) return new Date(a.startDate).getFullYear() - new Date(b.startDate).getFullYear();\n\t\t\t\t\t\t\t\t\t\t\treturn Months.indexOf(getMonthName(new Date(a.startDate).getMonth())) - Months.indexOf(getMonthName(new Date(b.startDate).getMonth()));\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.map((input, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{input.hire}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{getMonthName(new Date(input.startDate).getMonth() + 1) + ' ' + new Date(input.startDate).getFullYear()}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.salary}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>%{input.taxes}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.commissions}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditInput(input)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeleteInput({ inputMainId: sales._id, inputId: input._id })} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-6 col-xl-6'>{sales && sales._id && <ContractExpense salesId={sales._id} expenseInputs={sales.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default SalesInputs;\n","/home/yamin/Downloads/work/finpro/src/context/input-service.js",[],"/home/yamin/Downloads/work/finpro/src/views/Sales/ContractorExpense.js",["246"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ salesId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t});\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: salesId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: salesId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: salesId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Contractor</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per month) </th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'contractor')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n",["247","248"],"/home/yamin/Downloads/work/finpro/src/views/Marketing/ExpenseInputs.js",["249"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ marketingId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t\tperEmployee: '',\n\t\tdate: '',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t};\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: marketingId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: marketingId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t\tperEmployee: '',\n\t\t\tdate: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: marketingId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tperEmployee: expInp.perEmployee,\n\t\t\tdate: expInp.date,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t{dialogSetting.type === 'date' ? (\n\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='date' className='form-label'>\n\t\t\t\t\t\t\t\t\t\tDate\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type='date' name='date' value={expenseForm.date} onChange={handleInputChange} className='form-control' id='date' placeholder='Date' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\tdialogSetting.employee && (\n\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t<label htmlFor='perEmployee' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t{dialogSetting.employee}\n\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t<input type='text' name='perEmployee' value={expenseForm.perEmployee} onChange={handleInputChange} className='form-control' id='perEmployee' placeholder={dialogSetting.employee} />\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Tradeshows</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per quarter)</th>\n\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Tradeshows',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'tradeShows',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'tradeShows')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Tradeshows',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'tradeShows',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Online Marketing</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per month)</th>\n\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Online Marketing',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'onlineMarketing',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'onlineMarketing')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Online Marketing',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'onlineMarketing',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Equipment & Telecom</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per new Employee</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'equipmentAndTelecom')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Dues & Subscriptions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\tPer new Employee <br /> (per month)\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscription',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'duesAnsSubscriptions')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Travel & Entertainment</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per Employee (per month)</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'travelAndEntertainment')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainments',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Others</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'others')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.date}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/views/Marketing/MarketingInputs.js",["250"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addInputs, deleteInputs, updateInputs } from '../../context/input-service';\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { getMonthName, Months } from '../../utils/utils';\nimport moment from 'moment';\n\nimport ContractExpense from './ContractorExpense';\n\nfunction MarketingInputs({ marketing, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [marketingInputForm, setMarketingInputForm] = React.useState({\n\t\thire: '',\n\t\tstartDate: '',\n\t\tsalary: '',\n\t\ttaxes: '',\n\t\tcommissions: '',\n\t\ttitle: 'marketing',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetMarketingInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'marketing',\n\t\t});\n\t};\n\tconst handleMarketingChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetMarketingInputForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputs({ inputMainId: marketing._id, inputId: marketingInputForm.inputId, data: marketingInputForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputs(marketingInputForm);\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetMarketingInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'marketing',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeleteInput = async (data) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputs(data);\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditInput = (input) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetMarketingInputForm({\n\t\t\thire: input.hire,\n\t\t\tstartDate: moment(input.date).format('YYYY-MM-DD'),\n\t\t\tsalary: input.salary,\n\t\t\ttaxes: input.taxes,\n\t\t\tcommissions: input.commissions,\n\t\t\ttitle: 'marketing',\n\t\t\tinputId: input._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Hire</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Start Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Salary</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Taxes</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Commissions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add Marketing Inputs' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Marketing' : 'Add Marketing'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='hire' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHire\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='hire' value={marketingInputForm.hire} onChange={handleMarketingChange} className='form-control' id='hire' placeholder='Hire' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='startDate' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tStart Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='date' name='startDate' value={marketingInputForm.startDate} onChange={handleMarketingChange} className='form-control' id='date' placeholder='Start Date' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='salary' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSalary\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='salary' value={marketingInputForm.salary} onChange={handleMarketingChange} className='form-control' id='salary' placeholder='Salary' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='taxes' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTaxes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='taxes' value={marketingInputForm.taxes} onChange={handleMarketingChange} className='form-control' id='taxes' placeholder='Taxes' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='commissions' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCommissions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='commissions' value={marketingInputForm.commissions} onChange={handleMarketingChange} className='form-control' id='commissions' placeholder='Commissions' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update Marketing' : 'Add Marketing')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{marketing &&\n\t\t\t\t\t\t\t\t\tmarketing.inputs &&\n\t\t\t\t\t\t\t\t\tmarketing.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\tmarketing.inputs\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\t\tif (new Date(a.startDate).getFullYear() !== new Date(b.startDate).getFullYear()) return new Date(a.startDate).getFullYear() - new Date(b.startDate).getFullYear();\n\t\t\t\t\t\t\t\t\t\t\treturn Months.indexOf(getMonthName(new Date(a.startDate).getMonth())) - Months.indexOf(getMonthName(new Date(b.startDate).getMonth()));\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.map((input, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{input.hire}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{getMonthName(new Date(input.startDate).getMonth() + 1) + ' ' + new Date(input.startDate).getFullYear()}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.salary}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>%{input.taxes}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.commissions}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditInput(input)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeleteInput({ inputMainId: marketing._id, inputId: input._id })} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-6 col-xl-6'>{marketing && marketing._id && <ContractExpense marketingId={marketing._id} expenseInputs={marketing.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default MarketingInputs;\n","/home/yamin/Downloads/work/finpro/src/views/Marketing/ContractorExpense.js",["251"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ marketingId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t});\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: marketingId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: marketingId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: marketingId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Contractor</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per month) </th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'contractor')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/views/RandD/ExpenseInputs.js",["252"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ randdId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t\tperEmployee: '',\n\t\tdate: '',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t\tperEmployee: '',\n\t\t\tdate: '',\n\t\t});\n\t};\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: randdId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: randdId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t\tperEmployee: '',\n\t\t\tdate: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: randdId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tperEmployee: expInp.perEmployee,\n\t\t\tdate: expInp.date,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t{dialogSetting.type === 'date' ? (\n\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='date' className='form-label'>\n\t\t\t\t\t\t\t\t\t\tDate\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type='date' name='date' value={expenseForm.date} onChange={handleInputChange} className='form-control' id='date' placeholder='Date' />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t<label htmlFor='perEmployee' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t{dialogSetting.employee}\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<input type='text' name='perEmployee' value={expenseForm.perEmployee} onChange={handleInputChange} className='form-control' id='perEmployee' placeholder={dialogSetting.employee} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Equipment & Telecom</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per new Employee</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'equipmentAndTelecom')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Equipment & Telecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'equipmentAndTelecom',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Dues & Subscriptions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\tPer new Employee <br /> (per month)\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscription',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'duesAnsSubscriptions')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Dues & Subscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'duesAnsSubscriptions',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Travel & Entertainment</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Per Employee (per month)</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'travelAndEntertainment')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.perEmployee}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Travel & Entertainments',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Per New Employee',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'travelAndEntertainment',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Others</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'others')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.date}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\temployee: 'Cost',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'date',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbuttonTitle: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'others',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/views/RandD/RandDInputs.js",["253"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addInputs, deleteInputs, updateInputs } from '../../context/input-service';\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { getMonthName, Months } from '../../utils/utils';\nimport moment from 'moment';\n\nimport ContractExpense from './ContractorExpense';\n\nfunction RandDInputs({ randd, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [randdInputsForm, setRanddInputForm] = React.useState({\n\t\thire: '',\n\t\tstartDate: '',\n\t\tsalary: '',\n\t\ttaxes: '',\n\t\tcommissions: '',\n\t\ttitle: 'randd',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetRanddInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'randd',\n\t\t});\n\t};\n\n\tconst handleRanddInputs = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetRanddInputForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputs({ inputMainId: randd._id, inputId: randdInputsForm.inputId, data: randdInputsForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputs(randdInputsForm);\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetRanddInputForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'randd',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeleteInput = async (data) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputs(data);\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditInput = (input) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetRanddInputForm({\n\t\t\thire: input.hire,\n\t\t\tstartDate: moment(input.date).format('YYYY-MM-DD'),\n\t\t\tsalary: input.salary,\n\t\t\ttaxes: input.taxes,\n\t\t\tcommissions: input.commissions,\n\t\t\ttitle: 'randd',\n\t\t\tinputId: input._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Hire</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Start Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Salary</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Taxes</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Commissions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add R & D Inputs' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit R & D' : 'Add R & D'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='hire' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHire\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='hire' value={randdInputsForm.hire} onChange={handleRanddInputs} className='form-control' id='hire' placeholder='Hire' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='startDate' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tStart Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='date' name='startDate' value={randdInputsForm.startDate} onChange={handleRanddInputs} className='form-control' id='date' placeholder='Start Date' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='salary' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSalary\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='salary' value={randdInputsForm.salary} onChange={handleRanddInputs} className='form-control' id='salary' placeholder='Salary' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='taxes' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTaxes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='taxes' value={randdInputsForm.taxes} onChange={handleRanddInputs} className='form-control' id='taxes' placeholder='Taxes' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='commissions' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCommissions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='commissions' value={randdInputsForm.commissions} onChange={handleRanddInputs} className='form-control' id='commissions' placeholder='Commissions' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update R & D' : 'Add R & D')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{randd &&\n\t\t\t\t\t\t\t\t\trandd.inputs &&\n\t\t\t\t\t\t\t\t\trandd.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\trandd.inputs\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\t\tif (new Date(a.startDate).getFullYear() !== new Date(b.startDate).getFullYear()) return new Date(a.startDate).getFullYear() - new Date(b.startDate).getFullYear();\n\t\t\t\t\t\t\t\t\t\t\treturn Months.indexOf(getMonthName(new Date(a.startDate).getMonth())) - Months.indexOf(getMonthName(new Date(b.startDate).getMonth()));\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.map((input, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{input.hire}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{getMonthName(new Date(input.startDate).getMonth() + 1) + ' ' + new Date(input.startDate).getFullYear()}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.salary}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>%{input.taxes}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.commissions}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditInput(input)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeleteInput({ inputMainId: randd._id, inputId: input._id })} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-6 col-xl-6'>{randd && randd._id && <ContractExpense randdId={randd._id} expenseInputs={randd.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default RandDInputs;\n","/home/yamin/Downloads/work/finpro/src/views/RandD/ContractorExpense.js",["254"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ randdId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t});\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: randdId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: randdId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: randdId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Contractor</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per month) </th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'contractor')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/views/GandA/ExpenseInputs.js",["255"],"/home/yamin/Downloads/work/finpro/src/views/GandA/GandAInputs.js",["256"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { addInputs, deleteInputs, updateInputs } from '../../context/input-service';\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { getMonthName, Months } from '../../utils/utils';\nimport moment from 'moment';\n\nimport ContractExpense from './ContractorExpense';\n\nfunction GandAInputs({ ganda, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst [gandaInputForm, setGandAForm] = React.useState({\n\t\thire: '',\n\t\tstartDate: '',\n\t\tsalary: '',\n\t\ttaxes: '',\n\t\tcommissions: '',\n\t\ttitle: 'ganda',\n\t});\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t\tsetEdit(false);\n\t\tsetGandAForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'ganda',\n\t\t});\n\t};\n\n\tconst handleGandAInputs = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetGandAForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e) => {\n\t\tsetLoader(true);\n\t\te.preventDefault();\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputs({ inputMainId: ganda._id, inputId: gandaInputForm.inputId, data: gandaInputForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputs(gandaInputForm);\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetGandAForm({\n\t\t\thire: '',\n\t\t\tstartDate: '',\n\t\t\tsalary: '',\n\t\t\ttaxes: '',\n\t\t\tcommissions: '',\n\t\t\ttitle: 'ganda',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeleteInput = async (data) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputs(data);\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditInput = (input) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetGandAForm({\n\t\t\thire: input.hire,\n\t\t\tstartDate: moment(input.date).format('YYYY-MM-DD'),\n\t\t\tsalary: input.salary,\n\t\t\ttaxes: input.taxes,\n\t\t\tcommissions: input.commissions,\n\t\t\ttitle: 'ganda',\n\t\t\tinputId: input._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Hire</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Start Date</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Salary</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Taxes</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Commissions</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i title='Add G & A Inputs' onClick={handleClickOpen} style={{ fontSize: '22px', cursor: 'pointer' }} className='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t\t\t\t\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit G & A' : 'Add G & A'}</DialogTitle>\n\n\t\t\t\t\t\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='hire' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tHire\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='hire' value={gandaInputForm.hire} onChange={handleGandAInputs} className='form-control' id='hire' placeholder='Hire' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-6 col-md-6 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='startDate' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tStart Date\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='date' name='startDate' value={gandaInputForm.startDate} onChange={handleGandAInputs} className='form-control' id='date' placeholder='Start Date' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='salary' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSalary\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='salary' value={gandaInputForm.salary} onChange={handleGandAInputs} className='form-control' id='salary' placeholder='Salary' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='taxes' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTaxes\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='taxes' value={gandaInputForm.taxes} onChange={handleGandAInputs} className='form-control' id='taxes' placeholder='Taxes' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor='commissions' className='form-label'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCommissions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input type='text' name='commissions' value={gandaInputForm.commissions} onChange={handleGandAInputs} className='form-control' id='commissions' placeholder='Commissions' required />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogContent>\n\t\t\t\t\t\t\t\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{!loader && (edit ? 'Update G & A' : 'Add G & A')}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t</DialogActions>\n\t\t\t\t\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t\t\t\t</Dialog>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{ganda &&\n\t\t\t\t\t\t\t\t\tganda.inputs &&\n\t\t\t\t\t\t\t\t\tganda.inputs.length > 0 &&\n\t\t\t\t\t\t\t\t\tganda.inputs\n\t\t\t\t\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t\t\t\t\tif (new Date(a.startDate).getFullYear() !== new Date(b.startDate).getFullYear()) return new Date(a.startDate).getFullYear() - new Date(b.startDate).getFullYear();\n\t\t\t\t\t\t\t\t\t\t\treturn Months.indexOf(getMonthName(new Date(a.startDate).getMonth())) - Months.indexOf(getMonthName(new Date(b.startDate).getMonth()));\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.map((input, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{input.hire}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{getMonthName(new Date(input.startDate).getMonth() + 1) + ' ' + new Date(input.startDate).getFullYear()}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.salary}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.taxes}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>${input.commissions}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Edit Plan' style={{ cursor: 'pointer' }} className='fe fe-edit edit-icon' onClick={() => handleEditInput(input)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i title='Delete Plan' style={{ cursor: 'pointer' }} onClick={() => handleDeleteInput({ inputMainId: ganda._id, inputId: input._id })} className='fe fe-trash-2 delete-icon'></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div className='row'>\n\t\t\t\t<div className='col-6 col-xl-6'>{ganda && ganda._id && <ContractExpense gandaId={ganda._id} expenseInputs={ganda.majorExpenseInput} setMsg={setMsg} setErr={setErr} setAlertClass={setAlertClass} />}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default GandAInputs;\n","/home/yamin/Downloads/work/finpro/src/views/GandA/ContractorExpense.js",["257"],"import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { AuthContext } from '../../context/context';\nimport { getInputs } from '../../context/fetch-service';\nimport { addInputExpense, deleteInputExpense, updateInputExpense } from '../../context/input-service';\n\nfunction ExpenseInputs({ gandaId, expenseInputs, setMsg, setErr, setAlertClass }) {\n\tconst { state, dispatch } = React.useContext(AuthContext);\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst [dialogSetting, setDialogSetting] = React.useState({\n\t\ttitle: '',\n\t\tbuttonTitle: '',\n\t\theading: '',\n\t\ttype: '',\n\t});\n\tconst [loader, setLoader] = React.useState(false);\n\tconst [edit, setEdit] = React.useState(false);\n\n\tconst handleClickOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (e) => {\n\t\te.preventDefault();\n\t\tsetOpen(false);\n\t};\n\n\tconst [expenseForm, setExpenseForm] = React.useState({\n\t\tvalue: '',\n\t\tcost: '',\n\t});\n\n\tconst handleInputChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tsetExpenseForm((prevState) => {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\t[name]: value,\n\t\t\t};\n\t\t});\n\t};\n\n\tconst handleSubmit = async (e, heading) => {\n\t\te.preventDefault();\n\n\t\tsetLoader(true);\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tlet update = await updateInputExpense({ inputMainId: gandaId, inputId: expenseForm.inputId, data: expenseForm });\n\t\t\t\tif (update.status === 200 || update.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(update.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetEdit(false);\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet add = await addInputExpense({ ...expenseForm, inputMainId: gandaId, heading });\n\t\t\t\tif (add.status === 200 || add.status === 201) {\n\t\t\t\t\tlet inputs = await getInputs();\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\t\tpayload: inputs,\n\t\t\t\t\t});\n\n\t\t\t\t\tsetAlertClass('show');\n\t\t\t\t\tsetMsg(add.data.message);\n\t\t\t\t\tsetErr('');\n\t\t\t\t\tsetLoader(false);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tconsole.log(e);\n\t\t\tif (err.response && err.response.data) {\n\t\t\t\tif (err.response.data.error) {\n\t\t\t\t\tsetErr(err.response.data.error.message);\n\t\t\t\t} else if (err.response.data.errors) {\n\t\t\t\t\tlet errors = err.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(err.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(err.message);\n\t\t\t}\n\t\t\tsetLoader(false);\n\t\t}\n\t\tsetExpenseForm({\n\t\t\tvalue: '',\n\t\t\tcost: '',\n\t\t});\n\t\tsetOpen(false);\n\t};\n\n\tconst handleDeletePlan = async (inputId) => {\n\t\ttry {\n\t\t\tlet deletePlanRes = await deleteInputExpense({ inputMainId: gandaId, inputId });\n\n\t\t\tif (deletePlanRes.status === 200) {\n\t\t\t\tlet inputs = await getInputs();\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'SET_INPUTS',\n\t\t\t\t\tpayload: inputs,\n\t\t\t\t});\n\n\t\t\t\tsetAlertClass('show');\n\t\t\t\tsetMsg(deletePlanRes.data.message);\n\t\t\t\tsetErr('');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tsetAlertClass('show');\n\t\t\tsetMsg('');\n\t\t\tif (e.response && e.response.data) {\n\t\t\t\tif (e.response.data.error) {\n\t\t\t\t\tsetErr(e.response.data.error.message);\n\t\t\t\t} else if (e.response.data.errors) {\n\t\t\t\t\tconsole.log(e.response.data.errors);\n\t\t\t\t\tlet errors = e.response.data.errors.map((err) => <li>{err.msg}</li>);\n\t\t\t\t\tsetErr(errors);\n\t\t\t\t} else {\n\t\t\t\t\tsetErr(e.response.data.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetErr(e.message);\n\t\t\t}\n\t\t}\n\t\tsetOpen(false);\n\t};\n\n\tconst handleEditPlan = (expInp) => {\n\t\tsetEdit(true);\n\t\tsetOpen(true);\n\t\tsetExpenseForm({\n\t\t\tvalue: expInp.value,\n\t\t\tcost: expInp.cost,\n\t\t\tinputId: expInp._id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Dialog open={open} onClose={handleClose} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\n\t\t\t\t<DialogTitle id='alert-dialog-title'>{edit ? 'Edit Expense' : 'Add Expense'}</DialogTitle>\n\t\t\t\t<form onSubmit={(e) => handleSubmit(e, dialogSetting.heading)}>\n\t\t\t\t\t<DialogContent>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='value' className='form-label'>\n\t\t\t\t\t\t\t\t\t{dialogSetting.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='value' value={expenseForm.value} onChange={handleInputChange} className='form-control' id='value' placeholder='Credit Card Processing Fees' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='row g-3'>\n\t\t\t\t\t\t\t<div className='col-12 col-md-12 mb-3'>\n\t\t\t\t\t\t\t\t<label htmlFor='cost' className='form-label'>\n\t\t\t\t\t\t\t\t\tCost\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<input type='text' name='cost' value={expenseForm.cost} onChange={handleInputChange} className='form-control' id='cost' placeholder='Cost' required />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</DialogContent>\n\t\t\t\t\t<DialogActions>\n\t\t\t\t\t\t<button className='btn btn-danger' onClick={handleClose}>\n\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button disabled={loader} type='submit' className='btn btn-primary' autoFocus>\n\t\t\t\t\t\t\t{loader && (\n\t\t\t\t\t\t\t\t<div className='spinner-border spinner-border-sm' role='status'>\n\t\t\t\t\t\t\t\t\t<span className='sr-only'>Loading...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{!loader && (edit ? 'Update Expense' : 'Add Expense')}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</DialogActions>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\t\t\t<div className='card'>\n\t\t\t\t<div>\n\t\t\t\t\t<div className='table-responsive'>\n\t\t\t\t\t\t<table className='table table-sm table-hover table-nowrap mb-0'>\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Contractor</th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>Cost (per month) </th>\n\t\t\t\t\t\t\t\t\t<th scope='col'>\n\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\ttitle='Add Major Expense'\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ fontSize: '22px' }}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\thandleClickOpen();\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-plus add-icon'></i>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{expenseInputs &&\n\t\t\t\t\t\t\t\t\texpenseInputs\n\t\t\t\t\t\t\t\t\t\t.filter((exp) => exp.heading === 'contractor')\n\t\t\t\t\t\t\t\t\t\t.map((expInp, id) => (\n\t\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.value}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>{expInp.cost}</td>\n\t\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='fe fe-edit edit-icon'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetDialogSetting({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: 'Contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theading: 'contractor',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleEditPlan(expInp);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className='fe fe-trash-2 delete-icon' onClick={() => handleDeletePlan(expInp._id)}></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ExpenseInputs;\n","/home/yamin/Downloads/work/finpro/src/utils/utils.js",[],"/home/yamin/Downloads/work/finpro/src/utils/chart-utils.js",[],"/home/yamin/Downloads/work/finpro/src/context/payment-service.js",[],"/home/yamin/Downloads/work/finpro/src/context/subscription-service.js",[],"/home/yamin/Downloads/work/finpro/src/context/colors.js",[],"/home/yamin/Downloads/work/finpro/src/views/Auth/Confirm/Confirm.js",[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","replacedBy":"261"},{"ruleId":"258","replacedBy":"262"},{"ruleId":"260","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":26,"column":8,"nodeType":"266","messageId":"267","endLine":26,"endColumn":15},{"ruleId":"258","replacedBy":"268"},{"ruleId":"260","replacedBy":"269"},{"ruleId":"264","severity":1,"message":"270","line":8,"column":61,"nodeType":"266","messageId":"267","endLine":8,"endColumn":67},{"ruleId":"271","severity":1,"message":"272","line":98,"column":20,"nodeType":"273","messageId":"274","endLine":98,"endColumn":22},{"ruleId":"264","severity":1,"message":"275","line":102,"column":7,"nodeType":"266","messageId":"267","endLine":102,"endColumn":17},{"ruleId":"258","replacedBy":"276"},{"ruleId":"260","replacedBy":"277"},{"ruleId":"264","severity":1,"message":"278","line":55,"column":32,"nodeType":"266","messageId":"267","endLine":55,"endColumn":36},{"ruleId":"264","severity":1,"message":"279","line":3,"column":10,"nodeType":"266","messageId":"267","endLine":3,"endColumn":13},{"ruleId":"264","severity":1,"message":"278","line":56,"column":32,"nodeType":"266","messageId":"267","endLine":56,"endColumn":36},{"ruleId":"258","replacedBy":"280"},{"ruleId":"260","replacedBy":"281"},{"ruleId":"264","severity":1,"message":"265","line":16,"column":8,"nodeType":"266","messageId":"267","endLine":16,"endColumn":15},{"ruleId":"264","severity":1,"message":"265","line":17,"column":8,"nodeType":"266","messageId":"267","endLine":17,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":19,"column":10,"nodeType":"266","messageId":"267","endLine":19,"endColumn":15},{"ruleId":"264","severity":1,"message":"283","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":13},{"ruleId":"264","severity":1,"message":"284","line":12,"column":12,"nodeType":"266","messageId":"267","endLine":12,"endColumn":16},{"ruleId":"264","severity":1,"message":"285","line":19,"column":9,"nodeType":"266","messageId":"267","endLine":19,"endColumn":15},{"ruleId":"264","severity":1,"message":"286","line":24,"column":9,"nodeType":"266","messageId":"267","endLine":24,"endColumn":13},{"ruleId":"264","severity":1,"message":"287","line":25,"column":8,"nodeType":"266","messageId":"267","endLine":25,"endColumn":23},{"ruleId":"264","severity":1,"message":"288","line":28,"column":8,"nodeType":"266","messageId":"267","endLine":28,"endColumn":19},{"ruleId":"264","severity":1,"message":"289","line":74,"column":8,"nodeType":"266","messageId":"267","endLine":74,"endColumn":20},{"ruleId":"264","severity":1,"message":"282","line":13,"column":10,"nodeType":"266","messageId":"267","endLine":13,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":14,"column":10,"nodeType":"266","messageId":"267","endLine":14,"endColumn":15},{"ruleId":"258","replacedBy":"290"},{"ruleId":"260","replacedBy":"291"},{"ruleId":"264","severity":1,"message":"282","line":11,"column":10,"nodeType":"266","messageId":"267","endLine":11,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":15,"column":10,"nodeType":"266","messageId":"267","endLine":15,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"258","replacedBy":"292"},{"ruleId":"260","replacedBy":"293"},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":15,"column":10,"nodeType":"266","messageId":"267","endLine":15,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":15,"column":10,"nodeType":"266","messageId":"267","endLine":15,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":15,"column":10,"nodeType":"266","messageId":"267","endLine":15,"endColumn":15},{"ruleId":"264","severity":1,"message":"282","line":12,"column":10,"nodeType":"266","messageId":"267","endLine":12,"endColumn":15},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],["294"],["295"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar",["294"],["295"],"'radius' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'nextCorner' is assigned a value but never used.",["294"],["295"],"'data' is assigned a value but never used.","'Bar' is defined but never used.",["294"],["295"],"'state' is assigned a value but never used.","'set' is defined but never used.","'user' is assigned a value but never used.","'loader' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'CustomToggle' is assigned a value but never used.",["294"],["295"],["294"],["295"],"no-global-assign","no-unsafe-negation"]